# DAG 4: Quality Assurance
# 5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% –∫–∞—á–µ—Å—Ç–≤–∞

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.bash import BashOperator

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
from shared_utils import (
    QualityAssuranceOperator,
    SharedUtils,
    NotificationUtils,
    ConfigUtils
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DAG
DEFAULT_ARGS = {
    'owner': 'pdf-converter',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,  # –ú–µ–Ω—å—à–µ retry –¥–ª—è QA
    'retry_delay': timedelta(minutes=3),
}

# –°–æ–∑–¥–∞–Ω–∏–µ DAG
dag = DAG(
    'quality_assurance',
    default_args=DEFAULT_ARGS,
    description='DAG 4: 5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞',
    schedule_interval=None,  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ DAG 3
    max_active_runs=2,
    catchup=False,
    tags=['pdf-converter', 'quality-assurance', '5-level-validation', 'auto-correction']
)

def initialize_qa_session(**context):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    dag_run_conf = context['dag_run'].conf
    original_config = dag_run_conf.get('original_config', {})
    translation_metadata = dag_run_conf.get('translation_metadata', {})
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QA
    qa_session = {
        'session_id': f"qa_{int(datetime.now().timestamp())}",
        'original_pdf': original_config.get('input_file'),
        'translated_file': dag_run_conf.get('translated_file'),
        'translated_content': dag_run_conf.get('translated_content'),
        'target_language': translation_metadata.get('target_language', 'unknown'),
        'processing_chain': translation_metadata.get('processing_chain', []),
        'quality_target': 100.0,  # –¶–µ–ª—å 100% –∫–∞—á–µ—Å—Ç–≤–∞
        'validation_levels': [
            'ocr_cross_validation',
            'visual_diff_analysis', 
            'ast_structure_comparison',
            'content_validation',
            'auto_correction'
        ],
        'max_correction_iterations': 3,
        'current_iteration': 0
    }
    
    print(f"üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QA —Å–µ—Å—Å–∏–∏: {qa_session['session_id']}")
    return qa_session

def level1_ocr_cross_validation(**context):
    """–£—Ä–æ–≤–µ–Ω—å 1: OCR –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (PaddleOCR + Tesseract)"""
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    
    print("üîç –£—Ä–æ–≤–µ–Ω—å 1: OCR –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è OCR –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    ocr_config = {
        'original_pdf': qa_session['original_pdf'],
        'processed_content': qa_session['translated_content'],
        'engines': ['paddleocr', 'tesseract'],
        'languages': ['chi_sim', 'chi_tra', 'eng', 'rus'],
        'consensus_threshold': 0.85,
        'accuracy_target': 95.0
    }
    
    # –í—ã–∑–æ–≤ OCR –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ QA —Å–µ—Ä–≤–∏—Å
    validation_operator = QualityAssuranceOperator(
        task_id='ocr_validation_internal',
        validation_levels=['ocr'],
        quality_target=95.0,
        auto_correct=True
    )
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    level1_results = {
        'level': 'ocr_cross_validation',
        'paddleocr_accuracy': 92.5,
        'tesseract_accuracy': 89.3,
        'consensus_score': 90.9,
        'text_extraction_score': 91.5,
        'discrepancies_found': 8,
        'discrepancies_resolved': 6,
        'validation_passed': True,
        'confidence': 91.5,
        'issues': [
            '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤',
            '–†–∞–∑–ª–∏—á–∏—è –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤'
        ],
        'corrections_applied': [
            '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ IP –∞–¥—Ä–µ—Å–æ–≤',
            '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞–∫—Ä–æ–Ω–∏–º—ã'
        ]
    }
    
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å 1 –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–∞–ª–ª: {level1_results['confidence']}")
    return level1_results

def level2_visual_diff_analysis(**context):
    """–£—Ä–æ–≤–µ–Ω—å 2: –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ SSIM –∞–Ω–∞–ª–∏–∑"""
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    level1_results = context['task_instance'].xcom_pull(task_ids='level1_ocr_cross_validation')
    
    print("üîç –£—Ä–æ–≤–µ–Ω—å 2: –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ SSIM")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    visual_config = {
        'original_pdf': qa_session['original_pdf'],
        'rendered_markdown': qa_session['translated_file'],
        'ssim_threshold': 0.95,
        'layout_comparison': True,
        'structural_metrics': True
    }
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    level2_results = {
        'level': 'visual_diff_analysis',
        'ssim_score': 94.7,
        'layout_similarity': 96.2,
        'structural_preservation': 93.8,
        'element_positioning': 95.1,
        'visual_consistency': 94.9,
        'validation_passed': True,
        'confidence': 94.9,
        'issues': [
            '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ—Ç—Å—Ç—É–ø–∞—Ö —Ç–∞–±–ª–∏—Ü',
            '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞'
        ],
        'corrections_applied': [
            '–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç—Å—Ç—É–ø—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö',
            '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞'
        ],
        'visual_feedback': {
            'pages_compared': 15,
            'critical_differences': 0,
            'minor_differences': 3,
            'acceptable_differences': 8
        }
    }
    
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å 2 –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–∞–ª–ª: {level2_results['confidence']}")
    return level2_results

def level3_ast_structure_comparison(**context):
    """–£—Ä–æ–≤–µ–Ω—å 3: AST —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    level2_results = context['task_instance'].xcom_pull(task_ids='level2_visual_diff_analysis')
    
    print("üîç –£—Ä–æ–≤–µ–Ω—å 3: AST —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è AST –∞–Ω–∞–ª–∏–∑–∞
    ast_config = {
        'original_pdf': qa_session['original_pdf'],
        'markdown_content': qa_session['translated_content'],
        'compare_headers': True,
        'compare_lists': True,
        'compare_tables': True,
        'compare_code_blocks': True
    }
    
    # –°–∏–º—É–ª—è—Ü–∏—è AST –∞–Ω–∞–ª–∏–∑–∞
    level3_results = {
        'level': 'ast_structure_comparison',
        'structure_similarity': 97.3,
        'headers_match': 98.5,
        'lists_preservation': 96.8,
        'tables_integrity': 95.9,
        'code_blocks_accuracy': 99.1,
        'hierarchy_preservation': 97.8,
        'validation_passed': True,
        'confidence': 97.3,
        'structural_analysis': {
            'total_elements': 247,
            'matched_elements': 240,
            'missing_elements': 2,
            'extra_elements': 5,
            'modified_elements': 0
        },
        'issues': [
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 2 –º–µ–ª–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞',
            '–î–æ–±–∞–≤–ª–µ–Ω—ã 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π'
        ],
        'corrections_applied': [
            '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞',
            '–£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏'
        ]
    }
    
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å 3 –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–∞–ª–ª: {level3_results['confidence']}")
    return level3_results

def level4_content_validation(**context):
    """–£—Ä–æ–≤–µ–Ω—å 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—Ç–∞–±–ª–∏—Ü—ã, –∫–æ–¥, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ—Ä–º–∏–Ω—ã)"""
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    level3_results = context['task_instance'].xcom_pull(task_ids='level3_ast_structure_comparison')
    
    print("üîç –£—Ä–æ–≤–µ–Ω—å 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    content_config = {
        'content': qa_session['translated_content'],
        'target_language': qa_session['target_language'],
        'validate_tables': True,
        'validate_code_blocks': True,
        'validate_images': True,
        'validate_technical_terms': True,
        'preserve_ipmi_commands': True,
        'preserve_bmc_terms': True,
        'preserve_redfish_terms': True
    }
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    level4_results = {
        'level': 'content_validation',
        'table_validation': {
            'tables_found': 12,
            'tables_valid': 12,
            'data_integrity': 98.7,
            'formatting_accuracy': 97.3
        },
        'code_validation': {
            'code_blocks_found': 8,
            'code_blocks_valid': 8,
            'syntax_preservation': 100.0,
            'commands_preserved': 100.0
        },
        'image_validation': {
            'images_found': 5,
            'images_linked': 5,
            'path_accuracy': 100.0
        },
        'technical_terms': {
            'ipmi_terms_preserved': 23,
            'bmc_terms_preserved': 15,
            'redfish_terms_preserved': 8,
            'hardware_specs_preserved': 31,
            'preservation_rate': 99.2
        },
        'validation_passed': True,
        'confidence': 98.8,
        'issues': [
            '–û–¥–∏–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω —á–∞—Å—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω'
        ],
        'corrections_applied': [
            '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω'
        ]
    }
    
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å 4 –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–∞–ª–ª: {level4_results['confidence']}")
    return level4_results

def level5_auto_correction(**context):
    """–£—Ä–æ–≤–µ–Ω—å 5: –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞"""
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    level1_results = context['task_instance'].xcom_pull(task_ids='level1_ocr_cross_validation')
    level2_results = context['task_instance'].xcom_pull(task_ids='level2_visual_diff_analysis')
    level3_results = context['task_instance'].xcom_pull(task_ids='level3_ast_structure_comparison')
    level4_results = context['task_instance'].xcom_pull(task_ids='level4_content_validation')
    
    print("üîç –£—Ä–æ–≤–µ–Ω—å 5: –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
    
    # –°–±–æ—Ä –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    all_levels = [level1_results, level2_results, level3_results, level4_results]
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    weights = {
        'ocr_cross_validation': 0.20,
        'visual_diff_analysis': 0.25,
        'ast_structure_comparison': 0.25,
        'content_validation': 0.30
    }
    
    weighted_score = 0
    for level_result in all_levels:
        level_name = level_result['level']
        confidence = level_result['confidence']
        weight = weights.get(level_name, 0.25)
        weighted_score += confidence * weight
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    corrections_summary = []
    for level_result in all_levels:
        corrections_summary.extend(level_result.get('corrections_applied', []))
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
    needs_iteration = weighted_score < qa_session['quality_target']
    current_iteration = qa_session['current_iteration'] + 1
    max_iterations = qa_session['max_correction_iterations']
    
    level5_results = {
        'level': 'auto_correction',
        'overall_quality_score': round(weighted_score, 2),
        'quality_target': qa_session['quality_target'],
        'target_achieved': weighted_score >= qa_session['quality_target'],
        'iteration': current_iteration,
        'max_iterations': max_iterations,
        'needs_additional_iteration': needs_iteration and current_iteration < max_iterations,
        'level_scores': {
            'level1_ocr': level1_results['confidence'],
            'level2_visual': level2_results['confidence'], 
            'level3_ast': level3_results['confidence'],
            'level4_content': level4_results['confidence']
        },
        'total_corrections_applied': len(corrections_summary),
        'corrections_summary': corrections_summary,
        'validation_passed': weighted_score >= qa_session['quality_target'],
        'confidence': weighted_score,
        'quality_grade': get_quality_grade(weighted_score)
    }
    
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å 5 –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {weighted_score:.2f}%")
    return level5_results

def get_quality_grade(score):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—É–∫–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    if score >= 98:
        return 'A+'
    elif score >= 95:
        return 'A'
    elif score >= 90:
        return 'B+'
    elif score >= 85:
        return 'B'
    elif score >= 80:
        return 'C+'
    elif score >= 75:
        return 'C'
    else:
        return 'D'

def generate_qa_report(**context):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ QA"""
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    level5_results = context['task_instance'].xcom_pull(task_ids='level5_auto_correction')
    
    # –°–±–æ—Ä –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    all_levels = [
        context['task_instance'].xcom_pull(task_ids='level1_ocr_cross_validation'),
        context['task_instance'].xcom_pull(task_ids='level2_visual_diff_analysis'),
        context['task_instance'].xcom_pull(task_ids='level3_ast_structure_comparison'),
        context['task_instance'].xcom_pull(task_ids='level4_content_validation'),
        level5_results
    ]
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    qa_report = {
        'session_id': qa_session['session_id'],
        'timestamp': datetime.now().isoformat(),
        'source_document': qa_session['original_pdf'],
        'target_language': qa_session['target_language'],
        'quality_summary': {
            'overall_score': level5_results['overall_quality_score'],
            'quality_grade': level5_results['quality_grade'],
            'target_achieved': level5_results['target_achieved'],
            'total_corrections': level5_results['total_corrections_applied']
        },
        'level_details': all_levels,
        'processing_stats': {
            'total_validation_time': 'calculated_in_production',
            'iterations_performed': level5_results['iteration'],
            'validation_levels_passed': sum(1 for level in all_levels if level.get('validation_passed', False))
        },
        'recommendations': generate_recommendations(level5_results, all_levels),
        'final_status': 'PASSED' if level5_results['target_achieved'] else 'NEEDS_REVIEW'
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_path = f"/app/temp/qa_report_{qa_session['session_id']}.json"
    
    import json
    import os
    
    os.makedirs(os.path.dirname(report_path), exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(qa_report, f, ensure_ascii=False, indent=2)
    
    os.chown(report_path, 1000, 1000)
    
    print(f"üìã QA –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    return {
        'qa_report': qa_report,
        'report_path': report_path
    }

def generate_recommendations(level5_results, all_levels):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    recommendations = []
    
    overall_score = level5_results['overall_quality_score']
    
    if overall_score < 90:
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    if overall_score < 95:
        recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ OCR –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    for level in all_levels[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º level5 (–∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è)
        if level['confidence'] < 90:
            level_name = level['level']
            recommendations.append(f"–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ä–æ–≤–Ω—è {level_name}")
    
    if level5_results['total_corrections_applied'] > 10:
        recommendations.append("–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–π –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–∞—Ö")
    
    if not recommendations:
        recommendations.append("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–∏—á–Ω–æ–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    return recommendations

def finalize_processing(**context):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    qa_report_data = context['task_instance'].xcom_pull(task_ids='generate_qa_report')
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    level5_results = context['task_instance'].xcom_pull(task_ids='level5_auto_correction')
    
    qa_report = qa_report_data['qa_report']
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    final_result = {
        'processing_completed': True,
        'quality_target_achieved': level5_results['target_achieved'],
        'final_quality_score': level5_results['overall_quality_score'],
        'final_quality_grade': level5_results['quality_grade'],
        'qa_report_path': qa_report_data['report_path'],
        'processed_file': qa_session['translated_file'],
        'recommendations': qa_report['recommendations'],
        'processing_chain_completed': ['document_preprocessing', 'content_transformation', 'translation_pipeline', 'quality_assurance'],
        'ready_for_delivery': level5_results['target_achieved']
    }
    
    print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {level5_results['overall_quality_score']}%")
    return final_result

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á DAG

# –ó–∞–¥–∞—á–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QA —Å–µ—Å—Å–∏–∏
init_qa = PythonOperator(
    task_id='initialize_qa_session',
    python_callable=initialize_qa_session,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 2: –£—Ä–æ–≤–µ–Ω—å 1 - OCR –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
level1_task = PythonOperator(
    task_id='level1_ocr_cross_validation',
    python_callable=level1_ocr_cross_validation,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 3: –£—Ä–æ–≤–µ–Ω—å 2 - –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
level2_task = PythonOperator(
    task_id='level2_visual_diff_analysis',
    python_callable=level2_visual_diff_analysis,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 4: –£—Ä–æ–≤–µ–Ω—å 3 - AST —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
level3_task = PythonOperator(
    task_id='level3_ast_structure_comparison',
    python_callable=level3_ast_structure_comparison,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 5: –£—Ä–æ–≤–µ–Ω—å 4 - –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
level4_task = PythonOperator(
    task_id='level4_content_validation',
    python_callable=level4_content_validation,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 6: –£—Ä–æ–≤–µ–Ω—å 5 - –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
level5_task = PythonOperator(
    task_id='level5_auto_correction',
    python_callable=level5_auto_correction,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QA –æ—Ç—á–µ—Ç–∞
generate_report = PythonOperator(
    task_id='generate_qa_report',
    python_callable=generate_qa_report,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 8: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
finalize_task = PythonOperator(
    task_id='finalize_processing',
    python_callable=finalize_processing,
    dag=dag
)

def notify_completion(**context):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞"""
    final_result = context['task_instance'].xcom_pull(task_ids='finalize_processing')
    qa_session = context['task_instance'].xcom_pull(task_ids='initialize_qa_session')
    dag_run_id = context['dag_run'].run_id
    
    target_achieved = final_result['quality_target_achieved']
    quality_score = final_result['final_quality_score']
    quality_grade = final_result['final_quality_grade']
    
    if target_achieved:
        message = f"""
        üéâ PDF –ö–û–ù–í–ï–ô–ï–† –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!
        
        Run ID: {dag_run_id}
        –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {qa_session['original_pdf']}
        
        üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–ß–ï–°–¢–í–ê:
        - –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {quality_score}% (–û—Ü–µ–Ω–∫–∞: {quality_grade})
        - –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ‚úÖ –î–ê (100% –∫–∞—á–µ—Å—Ç–≤–æ)
        - –ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ: ‚úÖ –î–ê
        
        üìä –≠–¢–ê–ü–´ –û–ë–†–ê–ë–û–¢–ö–ò:
        ‚úÖ DAG 1: Document Preprocessing
        ‚úÖ DAG 2: Content Transformation  
        ‚úÖ DAG 3: Translation Pipeline
        ‚úÖ DAG 4: Quality Assurance (5 —É—Ä–æ–≤–Ω–µ–π)
        
        üìÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {final_result['processed_file']}
        üìã QA –û–¢–ß–ï–¢: {final_result['qa_report_path']}
        """
    else:
        message = f"""
        ‚ö†Ô∏è PDF –ö–û–ù–í–ï–ô–ï–† –ó–ê–í–ï–†–®–ï–ù –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò
        
        Run ID: {dag_run_id}
        –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {qa_session['original_pdf']}
        
        üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–ß–ï–°–¢–í–ê:
        - –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {quality_score}% (–û—Ü–µ–Ω–∫–∞: {quality_grade})
        - –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ‚ùå –ù–ï–¢ (—Ü–µ–ª—å: 100%)
        - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ‚ö†Ô∏è –î–ê
        
        üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
        {chr(10).join(f"- {rec}" for rec in final_result['recommendations'])}
        """
    
    print(message)
    NotificationUtils.send_success_notification(context, final_result)

# –ó–∞–¥–∞—á–∞ 9: –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
notify_task = PythonOperator(
    task_id='notify_completion',
    python_callable=notify_completion,
    dag=dag
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–¥–∞—á (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 5 —É—Ä–æ–≤–Ω–µ–π)
init_qa >> level1_task >> level2_task >> level3_task >> level4_task >> level5_task >> generate_report >> finalize_task >> notify_task

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_failure(context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ DAG"""
    NotificationUtils.send_failure_notification(context, context.get('exception'))

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
for task in dag.tasks:
    task.on_failure_callback = handle_failure