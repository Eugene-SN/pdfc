# Master DAG: Orchestrator (–ò–°–ü–†–ê–í–õ–ï–ù–û)
# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö 4 –º–æ–¥—É–ª—å–Ω—ã—Ö DAG –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.sensors.external_task import ExternalTaskSensor
from airflow.models import Variable

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
from shared_utils import (
    SharedUtils,
    NotificationUtils,
    ConfigUtils
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DAG
DEFAULT_ARGS = {
    'owner': 'pdf-converter',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# –°–æ–∑–¥–∞–Ω–∏–µ Master DAG
dag = DAG(
    'orchestrator_dag',
    default_args=DEFAULT_ARGS,
    description='Master DAG: –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–≥–æ PDF –∫–æ–Ω–≤–µ–π–µ—Ä–∞ v2.0',
    schedule_interval=None,  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ API –æ—Ç Flask
    max_active_runs=5,
    catchup=False,
    tags=['pdf-converter', 'orchestrator', 'master-dag', 'coordination']
)

def validate_orchestrator_input(**context):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dag_run_conf = context['dag_run'].conf
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    required_params = ['input_file', 'filename', 'target_language', 'timestamp']
    missing_params = [param for param in required_params if not dag_run_conf.get(param)]
    
    if missing_params:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    input_file = dag_run_conf['input_file']
    if not SharedUtils.validate_input_file(input_file):
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–∞
    supported_languages = ['en', 'ru', 'zh', 'original']
    target_language = dag_run_conf['target_language']
    if target_language not in supported_languages:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {target_language}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö DAG
    master_config = {
        'input_file': input_file,
        'filename': dag_run_conf['filename'],
        'target_language': target_language,
        'quality_level': dag_run_conf.get('quality_level', 'high'),
        'enable_ocr': dag_run_conf.get('enable_ocr', True),
        'preserve_structure': dag_run_conf.get('preserve_structure', True),
        'timestamp': dag_run_conf['timestamp'],
        'batch_id': dag_run_conf.get('batch_id'),
        'batch_mode': dag_run_conf.get('batch_mode', False),
        'master_run_id': context['dag_run'].run_id,
        'pipeline_version': '2.0_modular',
        'processing_start_time': datetime.now().isoformat()
    }
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {dag_run_conf['filename']}")
    return master_config

def trigger_dag1_preprocessing(**context):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è DAG 1"""
    master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è DAG 1
    dag1_config = {
        'input_file': master_config['input_file'],
        'filename': master_config['filename'],
        'enable_ocr': master_config['enable_ocr'],
        'preserve_structure': master_config['preserve_structure'],
        'quality_level': master_config['quality_level'],
        'timestamp': master_config['timestamp'],
        'master_run_id': master_config['master_run_id'],
        'ocr_languages': 'chi_sim,chi_tra,eng,rus',
        'extract_tables': True,
        'extract_images': True,
        'docling_device': 'cuda'
    }
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ DAG 1: Document Preprocessing")
    return dag1_config

def prepare_dag2_config(**context):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è DAG 2 –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ DAG 1"""
    master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
    
    # DAG 2 –ø–æ–ª—É—á–∏—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç DAG 1
    dag2_config = {
        'intermediate_file': f"/app/temp/dag1_results_{master_config['timestamp']}.json",
        'original_config': master_config,
        'dag1_completed': True,
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è Content Transformation
        'vllm_model': 'Qwen/Qwen2.5-VL-32B-Instruct',
        'transformation_quality': master_config['quality_level'],
        'preserve_technical_terms': True
    }
    
    print(f"üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ DAG 2: Content Transformation")
    return dag2_config

def prepare_dag3_config(**context):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è DAG 3 –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ DAG 2"""
    master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
    
    # DAG 3 –ø–æ–ª—É—á–∏—Ç Markdown —Ñ–∞–π–ª –æ—Ç DAG 2
    dag3_config = {
        'markdown_file': f"/app/output/{master_config['target_language']}/{master_config['timestamp']}_{master_config['filename'].replace('.pdf', '.md')}",
        'original_config': master_config,
        'dag2_completed': True,
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è Translation Pipeline
        'translation_model': 'Qwen/Qwen3-30B-A3B-Instruct-2507',
        'target_language': master_config['target_language'],
        'preserve_technical_terms': True
    }
    
    print(f"üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ DAG 3: Translation Pipeline")
    return dag3_config

def prepare_dag4_config(**context):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è DAG 4 –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ DAG 3"""
    master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
    
    # DAG 4 –ø–æ–ª—É—á–∏—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç DAG 3
    dag4_config = {
        'translated_file': f"/app/output/{master_config['target_language']}/{master_config['timestamp']}_{master_config['filename'].replace('.pdf', '.md')}",
        'original_config': master_config,
        'translation_metadata': {
            'target_language': master_config['target_language'],
            'processing_chain': ['document_preprocessing', 'content_transformation', 'translation_pipeline']
        },
        'dag3_completed': True,
        'quality_target': 100.0,
        'validation_levels': 5,
        'auto_correction': True
    }
    
    print(f"üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ DAG 4: Quality Assurance")
    return dag4_config

def monitor_pipeline_progress(**context):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞"""
    master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö DAG
    pipeline_status = {
        'master_run_id': master_config['master_run_id'],
        'filename': master_config['filename'],
        'target_language': master_config['target_language'],
        'processing_start_time': master_config['processing_start_time'],
        'current_time': datetime.now().isoformat(),
        'stages_status': {
            'dag1_preprocessing': 'completed',
            'dag2_transformation': 'completed', 
            'dag3_translation': 'completed',
            'dag4_quality_assurance': 'running'
        },
        'overall_progress': '75%',
        'models_used': {
            'content_transformation': 'Qwen/Qwen2.5-VL-32B-Instruct',  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
            'translation': 'Qwen/Qwen3-30B-A3B-Instruct-2507'  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
        }
    }
    
    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–≤–µ–π–µ—Ä–∞: {pipeline_status['overall_progress']}")
    print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏: {pipeline_status['models_used']}")
    return pipeline_status

def finalize_orchestration(**context):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
    pipeline_status = context['task_instance'].xcom_pull(task_ids='monitor_pipeline_progress')
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = datetime.fromisoformat(master_config['processing_start_time'])
    end_time = datetime.now()
    processing_duration = end_time - start_time
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
    orchestration_result = {
        'master_run_id': master_config['master_run_id'],
        'processing_completed': True,
        'total_processing_time': str(processing_duration),
        'processing_duration_seconds': processing_duration.total_seconds(),
        'source_file': master_config['input_file'],
        'target_language': master_config['target_language'],
        'final_output_path': f"/app/output/{master_config['target_language']}/{master_config['timestamp']}_{master_config['filename'].replace('.pdf', '.md')}",
        'qa_report_path': f"/app/temp/qa_report_qa_{master_config['timestamp']}.json",
        'pipeline_stages_completed': 4,
        'modular_architecture': True,
        'models_used': pipeline_status.get('models_used', {}),
        'success': True,
        'pipeline_version': '2.0'
    }
    
    print(f"üéØ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_duration}")
    print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –º–æ–¥–µ–ª–∏: {orchestration_result['models_used']}")
    return orchestration_result

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á

# –ó–∞–¥–∞—á–∞ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
validate_input = PythonOperator(
    task_id='validate_orchestrator_input',
    python_callable=validate_orchestrator_input,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DAG 1
prepare_dag1 = PythonOperator(
    task_id='prepare_dag1_config',
    python_callable=trigger_dag1_preprocessing,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 3: –ó–∞–ø—É—Å–∫ DAG 1 - Document Preprocessing
trigger_dag1 = TriggerDagRunOperator(
    task_id='trigger_dag1_preprocessing',
    trigger_dag_id='document_preprocessing',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_dag1_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    timeout=1800,  # 30 –º–∏–Ω—É—Ç
    allowed_states=['success'],
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DAG 2
prepare_dag2 = PythonOperator(
    task_id='prepare_dag2_config',
    python_callable=prepare_dag2_config,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 5: –ó–∞–ø—É—Å–∫ DAG 2 - Content Transformation
trigger_dag2 = TriggerDagRunOperator(
    task_id='trigger_dag2_transformation',
    trigger_dag_id='content_transformation',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_dag2_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    timeout=1200,  # 20 –º–∏–Ω—É—Ç
    allowed_states=['success'],
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 6: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DAG 3
prepare_dag3 = PythonOperator(
    task_id='prepare_dag3_config',
    python_callable=prepare_dag3_config,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 7: –ó–∞–ø—É—Å–∫ DAG 3 - Translation Pipeline 
trigger_dag3 = TriggerDagRunOperator(
    task_id='trigger_dag3_translation',
    trigger_dag_id='translation_pipeline',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_dag3_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    timeout=1200,  # 20 –º–∏–Ω—É—Ç
    allowed_states=['success'],
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 8: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DAG 4
prepare_dag4 = PythonOperator(
    task_id='prepare_dag4_config',
    python_callable=prepare_dag4_config,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 9: –ó–∞–ø—É—Å–∫ DAG 4 - Quality Assurance
trigger_dag4 = TriggerDagRunOperator(
    task_id='trigger_dag4_quality_assurance',
    trigger_dag_id='quality_assurance',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_dag4_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    timeout=900,  # 15 –º–∏–Ω—É—Ç
    allowed_states=['success'],
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 10: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
monitor_progress = PythonOperator(
    task_id='monitor_pipeline_progress',
    python_callable=monitor_pipeline_progress,
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 11: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
finalize_orchestrator = PythonOperator(
    task_id='finalize_orchestration',
    python_callable=finalize_orchestration,
    dag=dag
)

def notify_orchestrator_completion(**context):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞"""
    orchestration_result = context['task_instance'].xcom_pull(task_ids='finalize_orchestration')
    master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
    
    success = orchestration_result['success']
    processing_time = orchestration_result['total_processing_time']
    filename = master_config['filename']
    target_language = master_config['target_language']
    models_used = orchestration_result.get('models_used', {})
    
    if success:
        message = f"""
üéâ –ú–û–î–£–õ–¨–ù–´–ô PDF –ö–û–ù–í–ï–ô–ï–† v2.0 –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!

üìÑ –§–∞–π–ª: {filename}
üåê –Ø–∑—ã–∫: {target_language}  
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time}

ü§ñ –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–û–î–ï–õ–ò:
‚úÖ Content Transformation: {models_used.get('content_transformation', 'N/A')}
‚úÖ Translation: {models_used.get('translation', 'N/A')}

üîÑ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –≠–¢–ê–ü–´:
‚úÖ DAG 1: Document Preprocessing (Docling + OCR)
‚úÖ DAG 2: Content Transformation (Qwen2.5-VL-32B-Instruct)
‚úÖ DAG 3: Translation Pipeline (Qwen3-30B-A3B-Instruct-2507)
‚úÖ DAG 4: Quality Assurance (5 —É—Ä–æ–≤–Ω–µ–π)

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞
- 5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞ 
- –ö–∞—á–µ—Å—Ç–≤–æ 100%: ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
- –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {orchestration_result['final_output_path']}
- QA –æ—Ç—á–µ—Ç: {orchestration_result['qa_report_path']}

üöÄ –°–ò–°–¢–ï–ú–ê v2.0 –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!
        """
    else:
        message = f"""
‚ùå –ú–û–î–£–õ–¨–ù–´–ô PDF –ö–û–ù–í–ï–ô–ï–† v2.0 –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò

üìÑ –§–∞–π–ª: {filename}
‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {processing_time}

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–∞–∂–¥–æ–≥–æ DAG –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã.
        """
    
    print(message)
    NotificationUtils.send_success_notification(context, orchestration_result)

# –ó–∞–¥–∞—á–∞ 12: –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
notify_completion = PythonOperator(
    task_id='notify_orchestrator_completion',
    python_callable=notify_orchestrator_completion,
    dag=dag
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–¥–∞—á (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö 4 DAG)
validate_input >> prepare_dag1 >> trigger_dag1 >> prepare_dag2 >> trigger_dag2 >> prepare_dag3 >> trigger_dag3 >> prepare_dag4 >> trigger_dag4 >> monitor_progress >> finalize_orchestrator >> notify_completion

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_orchestrator_failure(context):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    failed_task = context['task_instance'].task_id
    master_config = context.get('dag_run', {}).conf or {}
    
    error_message = f"""
üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –û–†–ö–ï–°–¢–†–ê–¢–û–†–ï v2.0

–ó–∞–¥–∞—á–∞: {failed_task}
–§–∞–π–ª: {master_config.get('filename', 'unknown')}
–û—à–∏–±–∫–∞: {context.get('exception', 'Unknown error')}

–ú–æ–¥—É–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.
    """
    
    print(error_message)
    NotificationUtils.send_failure_notification(context, context.get('exception'))

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
for task in dag.tasks:
    task.on_failure_callback = handle_orchestrator_failure