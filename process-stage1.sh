#!/bin/bash

# =============================================================================
# PDF CONVERTER PIPELINE v2.0 - –≠–¢–ê–ü 1: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í MARKDOWN
# –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ DAG 1 (Document Preprocessing) + DAG 2 (Content Transformation)
# –†–µ–∑—É–ª—å—Ç–∞—Ç: PDF ‚Üí Markdown (–∫–∏—Ç–∞–π—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª) –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
# =============================================================================

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INPUT_DIR="${SCRIPT_DIR}/input_pdf"
OUTPUT_DIR="${SCRIPT_DIR}/output_md_zh"
LOGS_DIR="${SCRIPT_DIR}/logs"
CONFIG_FILE="${SCRIPT_DIR}/.env"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# URL —Å–µ—Ä–≤–∏—Å–æ–≤
AIRFLOW_BASE_URL=${AIRFLOW_BASE_URL:-"http://localhost:8090"}
AIRFLOW_USERNAME=${AIRFLOW_USERNAME:-"admin"}
AIRFLOW_PASSWORD=${AIRFLOW_PASSWORD:-"admin"}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$INPUT_DIR" "$OUTPUT_DIR" "$LOGS_DIR"

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}[$timestamp]${NC} ${YELLOW}[$level]${NC} $message" | tee -a "$LOGS_DIR/stage1_$(date +%Y%m%d_%H%M%S).log"
}

show_header() {
    echo -e "${BLUE}"
    echo "==============================================================================="
    echo "  PDF CONVERTER PIPELINE v2.0 - –≠–¢–ê–ü 1: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í MARKDOWN"
    echo "==============================================================================="
    echo -e "${NC}"
    echo "üéØ –¶–µ–ª—å: PDF ‚Üí Markdown (–∫–∏—Ç–∞–π—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª)"
    echo "üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $INPUT_DIR"
    echo "üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $OUTPUT_DIR"
    echo ""
}

check_services() {
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Airflow
    if ! curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$AIRFLOW_BASE_URL/health" > /dev/null 2>&1; then
        log "ERROR" "Airflow UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $AIRFLOW_BASE_URL"
        log "INFO" "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞: ./start-system.sh"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Document Processor
    local doc_proc_url=${DOCUMENT_PROCESSOR_URL:-"http://localhost:8001"}
    if ! curl -s "$doc_proc_url/health" > /dev/null 2>&1; then
        log "ERROR" "Document Processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ vLLM (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å–µ—Ä–≤–∏—Å–∞)
    local vllm_url=${VLLM_SERVER_URL:-"http://localhost:8000"}
    if ! curl -s "$vllm_url/health" > /dev/null 2>&1; then
        log "ERROR" "vLLM Server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    log "INFO" "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"
}

trigger_dag() {
    local dag_id="$1"
    local config="$2"
    local description="$3"
    
    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ $description..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local json_config=$(echo "$config" | python3 -c "
import sys, json
try:
    config_dict = {}
    for line in sys.stdin:
        if '=' in line:
            key, value = line.strip().split('=', 1)
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
            if value.lower() in ['true', 'false']:
                config_dict[key] = value.lower() == 'true'
            elif value.isdigit():
                config_dict[key] = int(value)
            else:
                config_dict[key] = value
    print(json.dumps(config_dict))
except Exception as e:
    print('{}')
")
    
    # –ó–∞–ø—É—Å–∫ DAG —á–µ—Ä–µ–∑ API
    local response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "{\"conf\": $json_config}" \
        "$AIRFLOW_BASE_URL/api/v1/dags/$dag_id/dagRuns")
    
    local http_code=$(echo "$response" | tail -n1)
    local body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('dag_run_id', 'unknown'))" 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ DAG –∑–∞–ø—É—â–µ–Ω. Run ID: $dag_run_id"
        echo "$dag_run_id"
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ DAG: HTTP $http_code"
        log "ERROR" "–û—Ç–≤–µ—Ç: $body"
        return 1
    fi
}

wait_for_dag_completion() {
    local dag_id="$1"
    local dag_run_id="$2"
    local description="$3"
    local timeout=${4:-1800}  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    log "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è $description (—Ç–∞–π–º–∞—É—Ç: ${timeout}s)..."
    
    local start_time=$(date +%s)
    local dots=0
    
    while true; do
        local current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        
        if [ $elapsed -gt $timeout ]; then
            log "ERROR" "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è $description"
            return 1
        fi
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ DAG
        local response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_BASE_URL/api/v1/dags/$dag_id/dagRuns/$dag_run_id")
        
        local state=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('state', 'unknown'))
except:
    print('error')
" 2>/dev/null || echo "error")
        
        case "$state" in
            "success")
                log "INFO" "‚úÖ $description –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                return 0
                ;;
            "failed"|"upstream_failed")
                log "ERROR" "‚ùå $description –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
                return 1
                ;;
            "running")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                dots=$(((dots + 1) % 4))
                local progress_dots=$(printf "%*s" $dots '' | tr ' ' '.')
                printf "\r${YELLOW}[–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø]${NC} $description$progress_dots   "
                sleep 5
                ;;
            *)
                sleep 3
                ;;
        esac
    done
}

process_single_file() {
    local pdf_file="$1"
    local filename=$(basename "$pdf_file")
    local timestamp=$(date +%s)
    
    log "INFO" "üìÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: $filename"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ 1 (—Ç–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
    local stage1_config="
input_file=$pdf_file
filename=$filename
timestamp=$timestamp
target_language=zh
quality_level=high
enable_ocr=true
preserve_structure=true
extract_tables=true
extract_images=true
stage_mode=conversion_only
processing_stages=2"
    
    # –≠—Ç–∞–ø 1.1: Document Preprocessing
    local dag1_run_id
    dag1_run_id=$(trigger_dag "document_preprocessing" "$stage1_config" "Document Preprocessing")
    
    if [ $? -eq 0 ]; then
        if wait_for_dag_completion "document_preprocessing" "$dag1_run_id" "Document Preprocessing" 1800; then
            log "INFO" "‚úÖ –≠—Ç–∞–ø 1.1 –∑–∞–≤–µ—Ä—à–µ–Ω: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ 1.1"
            return 1
        fi
    else
        log "ERROR" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Document Preprocessing"
        return 1
    fi
    
    # –≠—Ç–∞–ø 1.2: Content Transformation
    local stage2_config="
intermediate_file=/app/temp/dag1_results_${timestamp}.json
original_config=$stage1_config
dag1_completed=true
vllm_model=Qwen/Qwen2.5-VL-32B-Instruct
transformation_quality=high
preserve_technical_terms=true"
    
    local dag2_run_id
    dag2_run_id=$(trigger_dag "content_transformation" "$stage2_config" "Content Transformation")
    
    if [ $? -eq 0 ]; then
        if wait_for_dag_completion "content_transformation" "$dag2_run_id" "Content Transformation" 1200; then
            log "INFO" "‚úÖ –≠—Ç–∞–ø 1.2 –∑–∞–≤–µ—Ä—à–µ–Ω: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Markdown"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            local output_file="$OUTPUT_DIR/${timestamp}_${filename%.pdf}.md"
            if [ -f "$output_file" ]; then
                log "INFO" "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $output_file"
                return 0
            else
                log "WARN" "‚ö†Ô∏è –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $output_file"
                return 1
            fi
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ 1.2"
            return 1
        fi
    else
        log "ERROR" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Content Transformation"
        return 1
    fi
}

process_batch() {
    log "INFO" "üîç –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤ –≤ $INPUT_DIR"
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
    local pdf_files=()
    while IFS= read -r -d '' file; do
        pdf_files+=("$file")
    done < <(find "$INPUT_DIR" -name "*.pdf" -type f -print0)
    
    local total_files=${#pdf_files[@]}
    
    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ $INPUT_DIR"
        echo "–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É $INPUT_DIR –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞"
        return 0
    fi
    
    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: $total_files"
    echo ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    local processed=0
    local failed=0
    local start_time=$(date +%s)
    
    for pdf_file in "${pdf_files[@]}"; do
        local filename=$(basename "$pdf_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename"
        
        if process_single_file "$pdf_file"; then
            ((processed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê${NC}"
        fi
        
        echo ""
    done
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time=$(date +%s)
    local total_duration=$((end_time - start_time))
    
    echo "==============================================================================="
    echo -e "${GREEN}–≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í MARKDOWN${NC}"
    echo "==============================================================================="
    echo -e "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
    echo -e "   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${GREEN}$processed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e "   –û—à–∏–±–æ–∫: ${RED}$failed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e "   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${BLUE}$total_duration${NC} —Å–µ–∫—É–Ω–¥"
    echo ""
    echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$OUTPUT_DIR${NC}"
    echo -e "üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$LOGS_DIR${NC}"
    echo ""
    
    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"
        echo "   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PDF —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    else
        echo -e "${GREEN}üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Markdown!${NC}"
        echo ""
        echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        echo "   - –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ./process-stage2.sh"
        echo "   - –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ./process-stage3.sh [—è–∑—ã–∫]"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    show_header
    check_services
    
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...${NC}"
    read -r
    
    process_batch
}

# –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi