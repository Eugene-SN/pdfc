#!/bin/bash

# ===============================================================================
# PDF CONVERTER PIPELINE v2.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–´–°–¢–†–´–ô –ó–ê–ü–£–°–ö
# –î–ª—è —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
# ===============================================================================

set -e

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
check_system_ready() {
  log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã..."
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
  if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ install.sh"
    exit 1
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
  if ! command -v docker compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  if [ ! -f "$PROJECT_DIR/docker-compose.yml" ]; then
    log_error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
  fi
  
  if [ ! -f "$PROJECT_DIR/.env" ] && [ ! -f "$PROJECT_DIR/env" ]; then
    log_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
  fi
  
  # –°–æ–∑–¥–∞–Ω–∏–µ .env –∏–∑ env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if [ ! -f "$PROJECT_DIR/.env" ] && [ -f "$PROJECT_DIR/env" ]; then
    cp "$PROJECT_DIR/env" "$PROJECT_DIR/.env"
    log_info "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ env"
  fi
  
  log_success "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
  log_info "–ó–∞–ø—É—Å–∫ PDF Converter Pipeline v2.0..."
  
  cd "$PROJECT_DIR"
  
  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  docker compose down 2>/dev/null || true
  
  # –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫
  log_info "–®–∞–≥ 1/4: –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
  docker compose up -d postgres redis
  sleep 10
  
  log_info "–®–∞–≥ 2/4: –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
  docker compose up -d prometheus grafana statsd-exporter
  sleep 5
  
  log_info "–®–∞–≥ 3/4: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è vLLM —Å–µ—Ä–≤–∏—Å–∞
  docker compose up -d dynamic-vllm-server document-processor quality-assurance translator
  sleep 20
  
  log_info "–®–∞–≥ 4/4: –ó–∞–ø—É—Å–∫ Airflow –∏ API..."
  docker compose up -d airflow-init
  sleep 10
  docker compose up -d airflow-webserver airflow-scheduler airflow-worker flask-api
  sleep 10
  
  # –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
  docker compose up -d pandoc-render diff-pdf 2>/dev/null || true
  
  log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health_check() {
  log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
  
  sleep 30 # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  
  local services=(
    "5000:Flask API"
    "8090:Airflow UI"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    "8000:Dynamic vLLM Server"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
    "8001:Document Processor"
    "8002:Quality Assurance"
    "8003:Translator"
    "9090:Prometheus"
    "3000:Grafana"
  )
  
  local healthy=0
  local total=${#services[@]}
  
  for service in "${services[@]}"; do
    local port="${service%:*}"
    local name="${service#*:}"
    
    if curl -s --connect-timeout 3 "http://localhost:$port" > /dev/null 2>&1 || \
       curl -s --connect-timeout 3 "http://localhost:$port/health" > /dev/null 2>&1; then
      log_success "$name (–ø–æ—Ä—Ç $port) ‚úÖ"
      ((healthy++))
    else
      log_warning "$name (–ø–æ—Ä—Ç $port) ‚ùå"
    fi
  done
  
  log_info "–†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: $healthy/$total"
  
  if [ $healthy -ge $((total * 2 / 3)) ]; then
    log_success "–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
    return 0
  else
    log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
    return 1
  fi
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
show_info() {
  echo
  log_success "================================================================"
  log_success "PDF Converter Pipeline v2.0 –ó–ê–ü–£–©–ï–ù!"
  log_success "================================================================"
  echo
  
  echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
  echo "  ‚Ä¢ Flask API: http://localhost:5000"
  echo "  ‚Ä¢ Airflow UI: http://localhost:8090 (admin/admin)"  # –ò–°–ü–†–ê–í–õ–ï–ù–û
  echo "  ‚Ä¢ Grafana: http://localhost:3000 (admin/admin)"
  echo "  ‚Ä¢ Prometheus: http://localhost:9090"
  echo "  ‚Ä¢ Dynamic vLLM API: http://localhost:8000"  # –ò–°–ü–†–ê–í–õ–ï–ù–û
  echo
  
  echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
  echo "  ‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ PDF: ./input_pdf/"
  echo "  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (RU): ./output_md_ru/"
  echo "  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (EN): ./output_md_en/"
  echo "  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (ZH): ./output_md_zh/"
  echo "  ‚Ä¢ –õ–æ–≥–∏: ./logs/"
  echo
  
  echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
  echo "  ‚Ä¢ –°—Ç–∞—Ç—É—Å: docker compose ps"
  echo "  ‚Ä¢ –õ–æ–≥–∏: docker compose logs -f [service]"
  echo "  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker compose down"
  echo "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ./start-system-fixed.sh"
  echo
  
  if [ -f "$PROJECT_DIR/convert_md.sh" ]; then
    echo "üìù –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
    [ -f "convert_md.sh" ] && echo "  ‚Ä¢ ./convert_md.sh - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF"
    [ -f "translate_ru.sh" ] && echo "  ‚Ä¢ ./translate_ru-fixed.sh - –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    [ -f "translate_en.sh" ] && echo "  ‚Ä¢ ./translate_en-fixed.sh - –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
    [ -f "quality_check.sh" ] && echo "  ‚Ä¢ ./quality_check.sh - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"
    echo
  fi
  
  log_success "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-start}" in
  "start")
    check_system_ready
    start_services
    if health_check; then
      show_info
    else
      echo
      log_warning "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∏"
      log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã: docker compose ps"
    fi
    ;;
  "stop")
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    cd "$PROJECT_DIR"
    docker compose down
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    ;;
  "restart")
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
    cd "$PROJECT_DIR"
    docker compose down
    sleep 5
    $0 start
    ;;
  "status")
    log_info "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
    cd "$PROJECT_DIR"
    docker compose ps
    ;;
  "logs")
    cd "$PROJECT_DIR"
    if [ -n "${2:-}" ]; then
      # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ª–æ–≥–æ–≤
      if [ "$2" == "vllm" ] || [ "$2" == "vllm-server" ]; then
        docker compose logs -f dynamic-vllm-server
      else
        docker compose logs -f "$2"
      fi
    else
      docker compose logs -f
    fi
    ;;
  "help"|"-h"|"--help")
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
    echo "  status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  logs - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–¥–æ–±–∞–≤—å—Ç–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ)"
    echo "  help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
    echo "  $0 logs dynamic-vllm-server # –õ–æ–≥–∏ vLLM —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  $0 status # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    ;;
  *)
    log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
    log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    exit 1
    ;;
esac