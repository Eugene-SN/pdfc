#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ vLLM Translator Config v2.0 (–ò–°–ü–†–ê–í–õ–ï–ù–û)
=====================================================================
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è vLLM Translator Service
–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ollama-translator config.py
–ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å vLLM API –≤–º–µ—Å—Ç–æ Ollama

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v2.0:
‚úÖ –ó–∞–º–µ–Ω–∞ Ollama endpoint –Ω–∞ vLLM OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Qwen3-30B-A3B-Instruct-2507
‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ thinking —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ 
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: "ÈóÆÂ§©": "WenTian"
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import os
import re
from typing import Dict, List, Tuple

# ==============================================
# üîß –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò API v2.0 (–ò–°–ü–†–ê–í–õ–ï–ù–û)
# ==============================================

# vLLM Server –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)
VLLM_API_URL = os.getenv('VLLM_SERVER_URL', 'http://vllm-server:8000')
VLLM_API_KEY = os.getenv('VLLM_API_KEY', 'pdf-converter-secure-key-2024')

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
TRANSLATION_MODEL = os.getenv('VLLM_TRANSLATION_MODEL', 'Qwen/Qwen3-30B-A3B-Instruct-2507')

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π endpoint –¥–ª—è vLLM
API_ENDPOINT = "/v1/chat/completions"

# ==============================================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ò v2.0
# ==============================================

API_TEMPERATURE = float(os.getenv('VLLM_TEMPERATURE', '0.1'))
API_MAX_TOKENS = int(os.getenv('VLLM_MAX_TOKENS', '4096'))
API_MAX_OUTPUT_TOKENS = int(os.getenv('VLLM_MAX_OUTPUT_TOKENS', '4096'))
API_TOP_P = float(os.getenv('VLLM_TOP_P', '0.9'))
API_TOP_K = int(os.getenv('VLLM_TOP_K', '50'))
API_FREQUENCY_PENALTY = float(os.getenv('VLLM_FREQUENCY_PENALTY', '0.0'))
API_PRESENCE_PENALTY = float(os.getenv('VLLM_PRESENCE_PENALTY', '0.0'))

# ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ thinking —Ä–µ–∂–∏–º–∞ –¥–ª—è Qwen3
DISABLE_THINKING = os.getenv('DISABLE_THINKING', 'true').lower() == 'true'

# ==============================================
# ‚è±Ô∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# ==============================================

REQUEST_TIMEOUT = int(os.getenv('REQUEST_TIMEOUT', '600'))
INTER_REQUEST_DELAY = float(os.getenv('INTER_REQUEST_DELAY', '0.2'))

# ==============================================
# üéØ –ë–ê–¢–ß–ò–ù–ì (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
# ==============================================

BATCH_SIZE_HEADERS = int(os.getenv('BATCH_SIZE_HEADERS', '4'))
BATCH_SIZE_TABLES = int(os.getenv('BATCH_SIZE_TABLES', '3'))
BATCH_SIZE_COMMANDS = int(os.getenv('BATCH_SIZE_COMMANDS', '2'))
BATCH_SIZE_TEXT = int(os.getenv('BATCH_SIZE_TEXT', '6'))
BATCH_SIZE_MIXED = int(os.getenv('BATCH_SIZE_MIXED', '4'))

# ==============================================
# üìö –°–õ–û–í–ê–†–¨ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –¢–ï–†–ú–ò–ù–û–í v2.0
# ==============================================

TECHNICAL_TERMINOLOGY = {
    # Brand names (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
    "ÈóÆÂ§©": "WenTian",
    "ËÅîÊÉ≥ÈóÆÂ§©": "Lenovo WenTian",
    "Â§©Êìé": "ThinkSystem",
    "AnyBay": "AnyBay",
    
    # Processors
    "Ëá≥Âº∫": "Xeon",
    "ÂèØÊâ©Â±ïÂ§ÑÁêÜÂô®": "Scalable Processors",
    "Ëã±ÁâπÂ∞î": "Intel",
    "Â§ÑÁêÜÂô®": "Processor",
    "ÂÜÖÊ†∏": "Core",
    "Á∫øÁ®ã": "Thread",
    "ÁùøÈ¢ë": "Turbo Boost",
    
    # Memory and storage
    "ÂÜÖÂ≠ò": "Memory",
    "Â≠òÂÇ®": "Storage",
    "Á°¨Áõò": "Drive",
    "Âõ∫ÊÄÅÁ°¨Áõò": "SSD",
    "Êú∫Ê¢∞Á°¨Áõò": "HDD",
    "ÁÉ≠ÊèíÊãî": "Hot-swap",
    "ÂÜó‰Ωô": "Redundancy",
    "ËÉåÊùø": "Backplane",
    "ÊâòÊû∂": "Tray",
    
    # Network
    "‰ª•Â§™ÁΩë": "Ethernet",
    "ÂÖâÁ∫§": "Fiber",
    "Â∏¶ÂÆΩ": "Bandwidth",
    "Âª∂Ëøü": "Latency",
    "ÁΩëÂç°": "Network Adapter",
    
    # Cooling
    "È£éÂÜ∑": "Air cooling",
    "Ê∂≤ÂÜ∑": "Liquid cooling",
    "Êï£ÁÉ≠": "Cooling",
    "È£éÊâá": "Fan",
    "Êï£ÁÉ≠Âô®": "Heatsink",
    
    # Form factors
    "Ëã±ÂØ∏": "inch",
    "Êú∫Êû∂": "Rack",
    "ÊèíÊßΩ": "Slot",
    "ËΩ¨Êé•Âç°": "Riser Card",
    
    # Power
    "ÁîµÊ∫ê": "Power Supply",
    "ÈìÇÈáë": "Platinum",
    "ÈíõÈáë": "Titanium",
    "CRPS": "CRPS",
    
    # Components
    "ËäØÁâáÁªÑ": "Chipset",
    "ÊéßÂà∂Âô®": "Controller",
    "ÈÄÇÈÖçÂô®": "Adapter",
    "ÂÖâÈ©±": "Optical Drive"
}

# –†—É—Å—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è
TECHNICAL_TERMINOLOGY_RU = {
    "ÈóÆÂ§©": "WenTian",
    "ËÅîÊÉ≥ÈóÆÂ§©": "Lenovo WenTian",
    "Ëá≥Âº∫": "Xeon",
    "ÂèØÊâ©Â±ïÂ§ÑÁêÜÂô®": "Scalable –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã",
    "Ëã±ÁâπÂ∞î": "Intel",
    "Â§ÑÁêÜÂô®": "–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä",
    "ÂÜÖÊ†∏": "—è–¥—Ä–æ",
    "Á∫øÁ®ã": "–ø–æ—Ç–æ–∫",
    "ÂÜÖÂ≠ò": "–ø–∞–º—è—Ç—å",
    "Â≠òÂÇ®": "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
    "Á°¨Áõò": "–¥–∏—Å–∫",
    "Âõ∫ÊÄÅÁ°¨Áõò": "SSD",
    "Êú∫Ê¢∞Á°¨Áõò": "HDD",
    "ÁÉ≠ÊèíÊãî": "–≥–æ—Ä—è—á–∞—è –∑–∞–º–µ–Ω–∞",
    "ÂÜó‰Ωô": "—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "ÊâòÊû∂": "–ª–æ—Ç–æ–∫",
    "‰ª•Â§™ÁΩë": "Ethernet",
    "Â∏¶ÂÆΩ": "–ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å",
    "Âª∂Ëøü": "–∑–∞–¥–µ—Ä–∂–∫–∞",
    "È£éÂÜ∑": "–≤–æ–∑–¥—É—à–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ",
    "Ê∂≤ÂÜ∑": "–∂–∏–¥–∫–æ—Å—Ç–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ",
    "Êï£ÁÉ≠Âô®": "—Ä–∞–¥–∏–∞—Ç–æ—Ä",
    "Êú∫Êû∂": "—Å—Ç–æ–π–∫–∞",
    "ÊèíÊßΩ": "—Å–ª–æ—Ç",
    "ÁîµÊ∫ê": "–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è",
    "ÈìÇÈáë": "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π",
    "ÈíõÈáë": "—Ç–∏—Ç–∞–Ω–æ–≤—ã–π"
}

# ==============================================
# üß† –ü–†–û–ú–ü–¢–´ v2.0 (–û–¢–ö–õ–Æ–ß–ï–ù–ò–ï THINKING)
# ==============================================

def get_system_prompt(source_lang_name: str, target_lang_name: str) -> str:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º thinking —Ä–µ–∂–∏–º–∞"""
    return f"""–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

–û–°–ù–û–í–ù–ê–Ø –ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã —Å {source_lang_name} –Ω–∞ {target_lang_name} —è–∑—ã–∫.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥, –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—Ä–∞–∑—ã "–í–æ—Ç –ø–µ—Ä–µ–≤–æ–¥", "Here is translation"
3. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤ —Ç–µ–≥–∞—Ö <–¥—É–º–∞—é>, –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö  
4. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –í–°–ï —á–∏—Å–ª–∞, –∫–æ–¥—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û–ß–ù–û
5. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ thinking —Ä–µ–∂–∏–º - –æ—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ä–∞–∑—É –∏ –∫—Ä–∞—Ç–∫–æ

–ë–†–ï–ù–î–´ (–ù–ï –ú–ï–ù–Ø–¢–¨!):
- "ÈóÆÂ§©" –í–°–ï–ì–î–ê ‚Üí "WenTian"
- "ËÅîÊÉ≥ÈóÆÂ§©" –í–°–ï–ì–î–ê ‚Üí "Lenovo WenTian"
- –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ: Intel, Xeon, PCIe, DDR5, NVMe, SAS, SATA

–ö–û–ú–ê–ù–î–´ –ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨:
- IPMI: chassis, power, mc, sensor, sel, sdr, fru
- API: get, set, list, status, activate, deactivate
- Hex –∫–æ–¥—ã: 0x30, 0x02
- –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã: GPU, CPU, SSD, HDD, RAID, BMC

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
- –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Markdown —Ç–∞–±–ª–∏—Ü –¢–û–ß–ù–û
- –ù–ï –∏–∑–º–µ–Ω—è–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
- –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ HTML —Ç–µ–≥–∏ –∏ –æ—Ç—Å—Ç—É–ø—ã

–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ thinking —Ç–µ–≥–∏ –∏–ª–∏ –ª—é–±—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä—è–º–æ –∏ –∫—Ä–∞—Ç–∫–æ!

–í—ã–≤–æ–¥–∏—Ç–µ –¢–û–õ–¨–ö–û {target_lang_name} –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!"""

def get_user_prompt(text_to_translate: str, source_lang_name: str, target_lang_name: str) -> str:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º thinking"""
    return f"""–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç {source_lang_name} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang_name} —è–∑—ã–∫:

{text_to_translate}"""

# ==============================================
# üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–ê–ß–ï–°–¢–í–ê v2.0
# ==============================================

def validate_technical_translation(original: str, translated: str, target_lang: str) -> dict:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    quality_score = 100
    issues = []

    # 1. –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    chinese_count = len(re.findall(r'[\u4e00-\u9fff]', translated))
    if chinese_count > 0:
        quality_score -= min(50, chinese_count * 3)
        issues.append(f"–û—Å—Ç–∞–ª–∏—Å—å –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã: {chinese_count}")

    # 2. –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ thinking
    thinking_patterns = [
        r'[–•—Ö]–æ—Ä–æ—à–æ[,\s]*–º–Ω–µ', r'[–°—Å]–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä', r'Let me', r'First I',
        r'[–í–≤]–æ—Ç –ø–µ—Ä–µ–≤–æ–¥', r'Here is', r'[–ù–Ω]–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω',
        r'<–¥—É–º–∞—é>', r'</–¥—É–º–∞—é>', r'<thinking>', r'</thinking>'
    ]
    
    thinking_count = sum(len(re.findall(pattern, translated)) for pattern in thinking_patterns)
    if thinking_count > 0:
        quality_score -= min(30, thinking_count * 10)
        issues.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {thinking_count}")

    # 3. –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –±—Ä–µ–Ω–¥–æ–≤  
    if "ÈóÆÂ§©" in original:
        if "WenTian" not in translated:
            quality_score -= 20
            issues.append("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –±—Ä–µ–Ω–¥–∞ ÈóÆÂ§©")

    # 4. –¢–∞–±–ª–∏—Ü—ã
    orig_table_rows = len(re.findall(r'^\|.*\|$', original, re.MULTILINE))
    trans_table_rows = len(re.findall(r'^\|.*\|$', translated, re.MULTILINE))
    if orig_table_rows > 0:
        table_preservation = trans_table_rows / orig_table_rows
        if table_preservation < 0.9:
            quality_score -= 15
            issues.append(f"–ù–∞—Ä—É—à–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü: {table_preservation:.1%}")

    # 5. –†–∞–∑–º–µ—Ä
    size_ratio = len(translated) / max(len(original), 1)
    if size_ratio > 2.5 or size_ratio < 0.4:
        quality_score -= 10
        issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {size_ratio:.2f}")

    # 6. –ß–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
    orig_numbers = re.findall(r'\d+(?:\.\d+)?(?:W|MHz|GB|TB|GHz|mm)', original)
    trans_numbers = re.findall(r'\d+(?:\.\d+)?(?:W|MHz|GB|TB|GHz|mm)', translated)
    if len(orig_numbers) != len(trans_numbers):
        quality_score -= 10
        issues.append("–ù–µ –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    quality_score = max(0, quality_score)
    
    status = ("–û–¢–õ–ò–ß–ù–û" if quality_score >= 95 else
              "–•–û–†–û–®–û" if quality_score >= 85 else
              "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û" if quality_score >= 70 else
              "–ü–õ–û–•–û")

    return {
        'quality_score': quality_score,
        'status': status,
        'issues': issues,
        'chinese_fragments': chinese_count,
        'thinking_count': thinking_count,
        'table_preservation': trans_table_rows / max(orig_table_rows, 1) if orig_table_rows > 0 else 1,
        'size_ratio': size_ratio
    }

# ==============================================
# üìä –ö–≠–®–ò–†–û–í–ê–ù–ò–ï v2.0
# ==============================================

ENABLE_CACHING = os.getenv('ENABLE_CACHING', 'true').lower() == 'true'
CACHE_SIZE_LIMIT = int(os.getenv('CACHE_SIZE_LIMIT', '5000'))
translation_cache = {}

def get_cache_key(text: str, source_lang: str, target_lang: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∞"""
    import hashlib
    content = f"{source_lang}-{target_lang}-{text}"
    return hashlib.md5(content.encode()).hexdigest()[:16]

def get_cached_translation(text: str, source_lang: str, target_lang: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –∫—ç—à–∞"""
    if not ENABLE_CACHING:
        return None
    cache_key = get_cache_key(text, source_lang, target_lang)
    return translation_cache.get(cache_key)

def cache_translation(text: str, source_lang: str, target_lang: str, translation: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫—ç—à"""
    if not ENABLE_CACHING or len(translation_cache) >= CACHE_SIZE_LIMIT:
        return
    cache_key = get_cache_key(text, source_lang, target_lang)
    translation_cache[cache_key] = translation

# ==============================================
# üéØ –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê v2.0
# ==============================================

def analyze_content_complexity(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not text.strip():
        return 'empty'

    lines = text.strip().split('\n')

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    if any(line.strip().startswith('#') for line in lines):
        return 'header'

    # –¢–∞–±–ª–∏—Ü—ã
    table_lines = [line for line in lines if line.strip().startswith('|')]
    if table_lines:
        max_cols = max(line.count('|') for line in table_lines)
        if max_cols > 6:
            return 'complex_table'
        elif len(table_lines) > 5:
            return 'table'

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if any(re.search(r'\d+\s*(GB|MB|GHz|MHz|W|TB)', line) for line in lines):
        return 'technical_specs'

    # –ö–æ–º–∞–Ω–¥—ã –∏ –∫–æ–¥—ã
    if any(re.search(r'\b(ipmitool|chassis|power|0x[0-9a-f]+)\b', line, re.I) for line in lines):
        return 'commands'

    # –°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if len(lines) > 3 and any('|' in line for line in lines):
        return 'mixed'

    return 'text'

def get_optimal_batch_size(content_type: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞"""
    batch_mapping = {
        'empty': 20,
        'header': BATCH_SIZE_HEADERS,
        'table': BATCH_SIZE_TABLES,
        'complex_table': 1,  # –°–ª–æ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –æ–¥–Ω–æ–π
        'technical_specs': 3,
        'commands': BATCH_SIZE_COMMANDS,
        'mixed': BATCH_SIZE_MIXED,
        'text': BATCH_SIZE_TEXT
    }
    return batch_mapping.get(content_type, BATCH_SIZE_TEXT)

# ==============================================
# üåê –Ø–ó–´–ö–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================================

SUPPORTED_LANGUAGES = {
    "zh-CN": "–∫–∏—Ç–∞–π—Å–∫–∏–π",
    "zh-TW": "–∫–∏—Ç–∞–π—Å–∫–∏–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π",
    "ru": "—Ä—É—Å—Å–∫–∏–π",
    "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "ja": "—è–ø–æ–Ω—Å–∫–∏–π",
    "ko": "–∫–æ—Ä–µ–π—Å–∫–∏–π",
    "de": "–Ω–µ–º–µ—Ü–∫–∏–π",
    "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
    "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π",
    "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"
}

DEFAULT_SOURCE_LANG = "zh-CN"
DEFAULT_TARGET_LANG = "ru"

# ==============================================
# üìÑ –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–†–í–ò–°–ê
# ==============================================

# –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVICE_HOST = os.getenv('SERVICE_HOST', '0.0.0.0')
SERVICE_PORT = int(os.getenv('SERVICE_PORT', '8003'))

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
PROMETHEUS_ENABLED = os.getenv('PROMETHEUS_ENABLED', 'true').lower() == 'true'
METRICS_PORT = int(os.getenv('METRICS_PORT', '9003'))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
VERBOSE_PROGRESS = os.getenv('VERBOSE_PROGRESS', 'true').lower() == 'true'
SHOW_STATISTICS = os.getenv('SHOW_STATISTICS', 'true').lower() == 'true'
SHOW_DETAILED_PROGRESS = os.getenv('SHOW_DETAILED_PROGRESS', 'true').lower() == 'true'
LOG_ERRORS = os.getenv('LOG_ERRORS', 'true').lower() == 'true'
EMOJI_PROGRESS = os.getenv('EMOJI_PROGRESS', 'false').lower() == 'true'

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
MAX_REMAINING_FIXES = int(os.getenv('MAX_REMAINING_FIXES', '20'))
REMAINING_TIMEOUT = int(os.getenv('REMAINING_TIMEOUT', '300'))  # 5 –º–∏–Ω—É—Ç
BATCH_SIZE_REMAINING = int(os.getenv('BATCH_SIZE_REMAINING', '3'))
MAX_FIX_ATTEMPTS = int(os.getenv('MAX_FIX_ATTEMPTS', '2'))
MIN_FRAGMENT_LENGTH = int(os.getenv('MIN_FRAGMENT_LENGTH', '2'))

# –ü—É—Ç–∏ –∏ —Ñ–∞–π–ª—ã
SUPPORTED_EXTENSIONS = [".md", ".markdown", ".txt", ".rst"]
DEFAULT_OUTPUT_SUFFIX = "{target_lang}"
CREATE_BACKUP = os.getenv('CREATE_BACKUP', 'true').lower() == 'true'