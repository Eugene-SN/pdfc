#!/bin/bash

# =============================================================================
# PDF CONVERTER PIPELINE v2.0 - –≠–¢–ê–ü 3: –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ 4 DAG —á–µ—Ä–µ–∑ orchestrator_dag: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è + –ø–µ—Ä–µ–≤–æ–¥ + –≤–∞–ª–∏–¥–∞—Ü–∏—è
# –†–µ–∑—É–ª—å—Ç–∞—Ç: PDF ‚Üí Markdown –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (—Ü–µ–ª—å: 100%)
# =============================================================================

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INPUT_DIR="${SCRIPT_DIR}/input_pdf"
LOGS_DIR="${SCRIPT_DIR}/logs"
CONFIG_FILE="${SCRIPT_DIR}/.env"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# URL —Å–µ—Ä–≤–∏—Å–æ–≤ (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏)
AIRFLOW_BASE_URL=${AIRFLOW_BASE_URL:-"http://localhost:8090"}
AIRFLOW_USERNAME=${AIRFLOW_USERNAME:-"admin"}
AIRFLOW_PASSWORD=${AIRFLOW_PASSWORD:-"admin"}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
declare -A LANGUAGES=(
    ["ru"]="—Ä—É—Å—Å–∫–∏–π"
    ["en"]="–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
    ["zh"]="–∫–∏—Ç–∞–π—Å–∫–∏–π"
    ["original"]="–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π"
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$INPUT_DIR" "$LOGS_DIR"

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}[$timestamp]${NC} ${YELLOW}[$level]${NC} $message" | tee -a "$LOGS_DIR/stage3_$(date +%Y%m%d_%H%M%S).log"
}

show_header() {
    echo -e "${BLUE}"
    echo "==============================================================================="
    echo "  PDF CONVERTER PIPELINE v2.0 - –≠–¢–ê–ü 3: –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù"
    echo "==============================================================================="
    echo -e "${NC}"
    echo "üéØ –¶–µ–ª—å: PDF ‚Üí –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π Markdown —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"
    echo "üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $INPUT_DIR"
    echo ""
    echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ —ç—Ç–∞–ø—ã:"
    echo "   1Ô∏è‚É£ DAG 1: Document Preprocessing (–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)"
    echo "   2Ô∏è‚É£ DAG 2: Content Transformation (Markdown Qwen2.5-VL-32B)"
    echo "   3Ô∏è‚É£ DAG 3: Translation Pipeline (–ü–µ—Ä–µ–≤–æ–¥ Qwen3-30B-A3B)"
    echo "   4Ô∏è‚É£ DAG 4: Quality Assurance (5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)"
    echo ""
    echo "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:"
    echo "   ‚Ä¢ Content: Qwen/Qwen2.5-VL-32B-Instruct"
    echo "   ‚Ä¢ Translation: Qwen/Qwen3-30B-A3B-Instruct-2507"
    echo ""
}

show_usage() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–Ø–ó–´–ö]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:"
    for lang_code in "${!LANGUAGES[@]}"; do
        echo "  $lang_code - ${LANGUAGES[$lang_code]}"
    done
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 ru     # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    echo "  $0 en     # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
    echo "  $0        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"
    echo ""
}

select_target_language() {
    local target_lang="$1"
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    if [ -n "$target_lang" ]; then
        if [ -v "LANGUAGES[$target_lang]" ]; then
            echo "$target_lang"
            return 0
        else
            log "ERROR" "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: $target_lang"
            show_usage
            exit 1
        fi
    fi
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:${NC}"
    echo ""
    local i=1
    local lang_array=()
    
    for lang_code in "${!LANGUAGES[@]}"; do
        lang_array+=("$lang_code")
        echo "  $i) $lang_code - ${LANGUAGES[$lang_code]}"
        ((i++))
    done
    
    echo ""
    echo -n "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-${#LANGUAGES[@]}): "
    read -r choice
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#LANGUAGES[@]} ]; then
        local selected_lang="${lang_array[$((choice-1))]}"
        log "INFO" "–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: $selected_lang - ${LANGUAGES[$selected_lang]}"
        echo "$selected_lang"
    else
        log "ERROR" "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: $choice"
        exit 1
    fi
}

get_output_dir() {
    local target_lang="$1"
    echo "${SCRIPT_DIR}/output_md_${target_lang}"
}

check_services() {
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞..."
    
    local services=(
        "$AIRFLOW_BASE_URL/health:Airflow UI"
        "${DOCUMENT_PROCESSOR_URL:-http://localhost:8001}/health:Document Processor"
        "${VLLM_SERVER_URL:-http://localhost:8000}/health:vLLM Server"
        "${QUALITY_ASSURANCE_URL:-http://localhost:8002}/health:Quality Assurance"
        "${TRANSLATOR_URL:-http://localhost:8003}/health:Translator"
    )
    
    for service_info in "${services[@]}"; do
        local url="${service_info%:*}"
        local name="${service_info#*:}"
        
        if [[ "$name" == "Airflow UI" ]]; then
            if ! curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$url" > /dev/null 2>&1; then
                log "ERROR" "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $url"
                exit 1
            fi
        else
            if ! curl -s "$url" > /dev/null 2>&1; then
                log "ERROR" "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $url"
                log "INFO" "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞: ./start-system.sh"
                exit 1
            fi
        fi
        
        log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤"
    done
    
    log "INFO" "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–æ—Ç–æ–≤—ã"
}

trigger_orchestrator() {
    local pdf_file="$1"
    local filename="$2"
    local target_lang="$3"
    local timestamp="$4"
    
    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ Master Orchestrator –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞..."
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è orchestrator_dag (–≤—Å–µ 4 DAG)
    local orchestrator_config=$(python3 -c "
import json
config = {
    'input_file': '$pdf_file',
    'filename': '$filename',
    'target_language': '$target_lang',
    'timestamp': $timestamp,
    'quality_level': 'high',
    'enable_ocr': True,
    'preserve_structure': True,
    'extract_tables': True,
    'extract_images': True,
    'batch_mode': False,
    'pipeline_version': '2.0_modular',
    'full_pipeline': True,
    'models': {
        'content_transformation': 'Qwen/Qwen2.5-VL-32B-Instruct',
        'translation': 'Qwen/Qwen3-30B-A3B-Instruct-2507'
    },
    'quality_target': 100.0,
    'validation_levels': 5,
    'auto_correction': True
}
print(json.dumps(config))
")
    
    # –ó–∞–ø—É—Å–∫ orchestrator_dag —á–µ—Ä–µ–∑ API
    local response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "{\"conf\": $orchestrator_config}" \
        "$AIRFLOW_BASE_URL/api/v1/dags/orchestrator_dag/dagRuns")
    
    local http_code=$(echo "$response" | tail -n1)
    local body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('dag_run_id', 'unknown'))" 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ Master Orchestrator –∑–∞–ø—É—â–µ–Ω. Run ID: $dag_run_id"
        echo "$dag_run_id"
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Master Orchestrator: HTTP $http_code"
        log "ERROR" "–û—Ç–≤–µ—Ç: $body"
        return 1
    fi
}

monitor_orchestrator_progress() {
    local dag_run_id="$1"
    local filename="$2"
    local target_lang="$3"
    local timeout=3600  # 1 —á–∞—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
    
    log "INFO" "‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ (—Ç–∞–π–º–∞—É—Ç: ${timeout}s)..."
    
    local start_time=$(date +%s)
    local last_stage=""
    
    while true; do
        local current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        
        if [ $elapsed -gt $timeout ]; then
            log "ERROR" "‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"
            return 1
        fi
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ orchestrator_dag
        local response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_BASE_URL/api/v1/dags/orchestrator_dag/dagRuns/$dag_run_id")
        
        local state=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('state', 'unknown'))
except:
    print('error')
" 2>/dev/null || echo "error")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
        local tasks_response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_BASE_URL/api/v1/dags/orchestrator_dag/dagRuns/$dag_run_id/taskInstances")
        
        local current_stage=$(echo "$tasks_response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    task_instances = data.get('task_instances', [])
    
    stage_mapping = {
        'trigger_dag1_preprocessing': 'DAG 1: Document Preprocessing',
        'trigger_dag2_transformation': 'DAG 2: Content Transformation', 
        'trigger_dag3_translation': 'DAG 3: Translation Pipeline',
        'trigger_dag4_quality_assurance': 'DAG 4: Quality Assurance'
    }
    
    for task in task_instances:
        task_id = task.get('task_id', '')
        task_state = task.get('state', '')
        
        if task_state == 'running' and task_id in stage_mapping:
            print(stage_mapping[task_id])
            sys.exit(0)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é
    for task in reversed(task_instances):
        task_id = task.get('task_id', '')
        task_state = task.get('state', '')
        
        if task_state == 'success' and task_id in stage_mapping:
            print(f\"{stage_mapping[task_id]} ‚úÖ\")
            sys.exit(0)
    
    print('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...')
except:
    print('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...')
" 2>/dev/null || echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if [ "$current_stage" != "$last_stage" ]; then
            if [ -n "$current_stage" ]; then
                log "INFO" "üîÑ $current_stage"
                last_stage="$current_stage"
            fi
        fi
        
        case "$state" in
            "success")
                log "INFO" "‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                return 0
                ;;
            "failed"|"upstream_failed")
                log "ERROR" "‚ùå –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
                return 1
                ;;
            "running")
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                local minutes=$((elapsed / 60))
                printf "\r${YELLOW}[–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø $minutes –º–∏–Ω]${NC} $current_stage   "
                sleep 10
                ;;
            *)
                sleep 5
                ;;
        esac
    done
}

show_final_results() {
    local filename="$1"
    local target_lang="$2"
    local timestamp="$3"
    local processing_time="$4"
    
    local output_dir=$(get_output_dir "$target_lang")
    local output_file="$output_dir/${timestamp}_${filename%.pdf}.md"
    local qa_report="/app/temp/qa_report_qa_${timestamp}.json"
    
    echo ""
    echo "==============================================================================="
    echo -e "${GREEN}üéâ –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!${NC}"
    echo "==============================================================================="
    echo ""
    echo -e "üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${BLUE}$filename${NC}"
    echo -e "üåê –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: ${BLUE}${LANGUAGES[$target_lang]}${NC}"
    echo -e "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${BLUE}$processing_time${NC}"
    echo ""
    echo -e "ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
    echo -e "   ‚Ä¢ Content Transformation: ${YELLOW}Qwen/Qwen2.5-VL-32B-Instruct${NC}"
    echo -e "   ‚Ä¢ Translation: ${YELLOW}Qwen/Qwen3-30B-A3B-Instruct-2507${NC}"
    echo ""
    echo -e "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:"
    echo -e "   ‚úÖ DAG 1: Document Preprocessing (Docling + OCR)"
    echo -e "   ‚úÖ DAG 2: Content Transformation (vLLM Markdown)"
    echo -e "   ‚úÖ DAG 3: Translation Pipeline (vLLM Translation)"
    echo -e "   ‚úÖ DAG 4: Quality Assurance (5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)"
    echo ""
    
    # –ü–æ–∫–∞–∑–∞—Ç—å QA —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if [ -f "$qa_report" ]; then
        local qa_summary=$(python3 -c "
import json
try:
    with open('$qa_report', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    quality_summary = data.get('quality_summary', {})
    overall_score = quality_summary.get('overall_score', 'N/A')
    quality_grade = quality_summary.get('quality_grade', 'N/A')
    target_achieved = quality_summary.get('target_achieved', False)
    
    print(f\"Score: {overall_score}\")
    print(f\"Grade: {quality_grade}\")
    print(f\"Target: {target_achieved}\")
except:
    print(\"Score: N/A\")
    print(\"Grade: N/A\")  
    print(\"Target: N/A\")
")
        
        local score=$(echo "$qa_summary" | grep "Score:" | cut -d':' -f2 | xargs)
        local grade=$(echo "$qa_summary" | grep "Grade:" | cut -d':' -f2 | xargs)
        local target=$(echo "$qa_summary" | grep "Target:" | cut -d':' -f2 | xargs)
        
        echo -e "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞:"
        echo -e "   ‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: ${GREEN}$score%${NC}"
        echo -e "   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${BLUE}$grade${NC}"
        
        if [ "$target" = "True" ]; then
            echo -e "   ‚Ä¢ –¶–µ–ª—å 100%: ${GREEN}‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–ê${NC}"
        else
            echo -e "   ‚Ä¢ –¶–µ–ª—å 100%: ${YELLOW}‚ö†Ô∏è –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê${NC}"
        fi
        echo ""
    fi
    
    echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:"
    echo -e "   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${GREEN}$output_file${NC}"
    echo -e "   ‚Ä¢ QA –æ—Ç—á–µ—Ç: ${YELLOW}$qa_report${NC}"
    echo -e "   ‚Ä¢ –õ–æ–≥–∏: ${YELLOW}$LOGS_DIR${NC}"
    echo ""
    echo -e "${GREEN}üöÄ –°–ò–°–¢–ï–ú–ê v2.0 –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!${NC}"
}

process_single_file() {
    local pdf_file="$1"
    local target_lang="$2"
    local filename=$(basename "$pdf_file")
    local timestamp=$(date +%s)
    local start_time=$(date +%s)
    
    log "INFO" "üìÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è: $filename"
    log "INFO" "üåê –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: ${LANGUAGES[$target_lang]}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local output_dir=$(get_output_dir "$target_lang")
    mkdir -p "$output_dir"
    
    # –ó–∞–ø—É—Å–∫ orchestrator_dag
    local orchestrator_run_id
    orchestrator_run_id=$(trigger_orchestrator "$pdf_file" "$filename" "$target_lang" "$timestamp")
    
    if [ $? -eq 0 ]; then
        if monitor_orchestrator_progress "$orchestrator_run_id" "$filename" "$target_lang"; then
            local end_time=$(date +%s)
            local processing_duration=$((end_time - start_time))
            local processing_time="${processing_duration} —Å–µ–∫—É–Ω–¥"
            
            if [ $processing_duration -gt 60 ]; then
                local minutes=$((processing_duration / 60))
                local seconds=$((processing_duration % 60))
                processing_time="${minutes} –º–∏–Ω ${seconds} —Å–µ–∫"
            fi
            
            show_final_results "$filename" "$target_lang" "$timestamp" "$processing_time"
            return 0
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"
            return 1
        fi
    else
        log "ERROR" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å orchestrator"
        return 1
    fi
}

process_batch() {
    local target_lang="$1"
    
    log "INFO" "üîç –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞..."
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
    local pdf_files=()
    while IFS= read -r -d '' file; do
        pdf_files+=("$file")
    done < <(find "$INPUT_DIR" -name "*.pdf" -type f -print0)
    
    local total_files=${#pdf_files[@]}
    
    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ $INPUT_DIR"
        echo "–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É $INPUT_DIR –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞"
        return 0
    fi
    
    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: $total_files"
    log "INFO" "üåê –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: ${LANGUAGES[$target_lang]}"
    echo ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    local processed=0
    local failed=0
    local total_start_time=$(date +%s)
    
    for pdf_file in "${pdf_files[@]}"; do
        local filename=$(basename "$pdf_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename ‚Üí ${LANGUAGES[$target_lang]}"
        
        if process_single_file "$pdf_file" "$target_lang"; then
            ((processed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–•${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê${NC}"
        fi
        
        echo ""
    done
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local total_end_time=$(date +%s)
    local total_duration=$((total_end_time - total_start_time))
    
    echo "==============================================================================="
    echo -e "${GREEN}–ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù${NC}"
    echo "==============================================================================="
    echo -e "üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo -e "   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${GREEN}$processed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e "   –û—à–∏–±–æ–∫: ${RED}$failed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e "   –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: ${BLUE}${LANGUAGES[$target_lang]}${NC}"
    echo -e "   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${BLUE}$total_duration${NC} —Å–µ–∫—É–Ω–¥"
    echo ""
    
    local output_dir=$(get_output_dir "$target_lang")
    echo -e "üìÅ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: ${YELLOW}$output_dir${NC}"
    echo -e "üìã –õ–æ–≥–∏ –≤: ${YELLOW}$LOGS_DIR${NC}"
    echo ""
    
    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–∞–º:${NC}"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Airflow –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
        echo "   - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ vLLM —Å–µ—Ä–≤–∏—Å–∞"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤"
    else
        echo -e "${GREEN}üéâ –í–°–ï –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù–´!${NC}"
        echo -e "${GREEN}üöÄ –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê v2.0 –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local target_lang="${1:-}"
    
    show_header
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    target_lang=$(select_target_language "$target_lang")
    local output_dir=$(get_output_dir "$target_lang")
    
    echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$output_dir${NC}"
    echo ""
    
    check_services
    
    echo -e "${YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è${NC}"
    echo -e "${YELLOW}–ö–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—Å–µ 4 —ç—Ç–∞–ø–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞${NC}"
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...${NC}"
    read -r
    
    process_batch "$target_lang"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω -h –∏–ª–∏ --help
if [[ "${1:-}" =~ ^(-h|--help)$ ]]; then
    show_usage
    exit 0
fi

# –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi