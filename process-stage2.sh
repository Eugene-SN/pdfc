#!/bin/bash

# =============================================================================
# PDF CONVERTER PIPELINE v2.0 - –≠–¢–ê–ü 2: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø + –í–ê–õ–ò–î–ê–¶–ò–Ø
# –ó–∞–ø—É—Å–∫–∞–µ—Ç DAG 1 + DAG 2 + DAG 4 (–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞, —Å 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
# –†–µ–∑—É–ª—å—Ç–∞—Ç: PDF ‚Üí Markdown —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
# =============================================================================

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INPUT_DIR="${SCRIPT_DIR}/input_pdf"
OUTPUT_DIR="${SCRIPT_DIR}/output_md_zh"
LOGS_DIR="${SCRIPT_DIR}/logs"
CONFIG_FILE="${SCRIPT_DIR}/.env"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# URL —Å–µ—Ä–≤–∏—Å–æ–≤ (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏)
AIRFLOW_BASE_URL=${AIRFLOW_BASE_URL:-"http://localhost:8090"}
AIRFLOW_USERNAME=${AIRFLOW_USERNAME:-"admin"}
AIRFLOW_PASSWORD=${AIRFLOW_PASSWORD:-"admin"}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$INPUT_DIR" "$OUTPUT_DIR" "$LOGS_DIR"

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}[$timestamp]${NC} ${YELLOW}[$level]${NC} $message" | tee -a "$LOGS_DIR/stage2_$(date +%Y%m%d_%H%M%S).log"
}

show_header() {
    echo -e "${BLUE}"
    echo "==============================================================================="
    echo "  PDF CONVERTER PIPELINE v2.0 - –≠–¢–ê–ü 2: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø + –í–ê–õ–ò–î–ê–¶–ò–Ø"
    echo "==============================================================================="
    echo -e "${NC}"
    echo "üéØ –¶–µ–ª—å: PDF ‚Üí Markdown —Å 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞"
    echo "üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $INPUT_DIR"
    echo "üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $OUTPUT_DIR"
    echo "üîç –£—Ä–æ–≤–Ω–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:"
    echo "   1Ô∏è‚É£ OCR –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (PaddleOCR + Tesseract)"
    echo "   2Ô∏è‚É£ –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (SSIM –∞–Ω–∞–ª–∏–∑)"
    echo "   3Ô∏è‚É£ AST —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"
    echo "   4Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—Ç–∞–±–ª–∏—Ü—ã, –∫–æ–¥, —Ç–µ—Ä–º–∏–Ω—ã)"
    echo "   5Ô∏è‚É£ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (—Ü–µ–ª—å: 100%)"
    echo ""
}

check_services() {
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏..."
    
    local services=(
        "$AIRFLOW_BASE_URL/health:Airflow UI"
        "${DOCUMENT_PROCESSOR_URL:-http://localhost:8001}/health:Document Processor"
        "${VLLM_SERVER_URL:-http://localhost:8000}/health:vLLM Server"
        "${QUALITY_ASSURANCE_URL:-http://localhost:8002}/health:Quality Assurance"
    )
    
    for service_info in "${services[@]}"; do
        local url="${service_info%:*}"
        local name="${service_info#*:}"
        
        if [[ "$name" == "Airflow UI" ]]; then
            if ! curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$url" > /dev/null 2>&1; then
                log "ERROR" "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $url"
                exit 1
            fi
        else
            if ! curl -s "$url" > /dev/null 2>&1; then
                log "ERROR" "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $url"
                exit 1
            fi
        fi
        
        log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤"
    done
    
    log "INFO" "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã"
}

trigger_dag() {
    local dag_id="$1"
    local config="$2"
    local description="$3"
    
    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ $description..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local json_config=$(echo "$config" | python3 -c "
import sys, json
try:
    config_dict = {}
    for line in sys.stdin:
        if '=' in line and not line.strip().startswith('#'):
            key, value = line.strip().split('=', 1)
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
            if value.lower() in ['true', 'false']:
                config_dict[key] = value.lower() == 'true'
            elif value.isdigit():
                config_dict[key] = int(value)
            elif '.' in value and value.replace('.', '', 1).isdigit():
                config_dict[key] = float(value)
            else:
                config_dict[key] = value
    print(json.dumps(config_dict))
except Exception as e:
    print('{}')
")
    
    # –ó–∞–ø—É—Å–∫ DAG —á–µ—Ä–µ–∑ API
    local response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "{\"conf\": $json_config}" \
        "$AIRFLOW_BASE_URL/api/v1/dags/$dag_id/dagRuns")
    
    local http_code=$(echo "$response" | tail -n1)
    local body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('dag_run_id', 'unknown'))" 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ DAG –∑–∞–ø—É—â–µ–Ω. Run ID: $dag_run_id"
        echo "$dag_run_id"
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ DAG: HTTP $http_code"
        log "ERROR" "–û—Ç–≤–µ—Ç: $body"
        return 1
    fi
}

wait_for_dag_completion() {
    local dag_id="$1"
    local dag_run_id="$2"
    local description="$3"
    local timeout=${4:-1800}
    
    log "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è $description (—Ç–∞–π–º–∞—É—Ç: ${timeout}s)..."
    
    local start_time=$(date +%s)
    local dots=0
    
    while true; do
        local current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        
        if [ $elapsed -gt $timeout ]; then
            log "ERROR" "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è $description"
            return 1
        fi
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ DAG
        local response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_BASE_URL/api/v1/dags/$dag_id/dagRuns/$dag_run_id")
        
        local state=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('state', 'unknown'))
except:
    print('error')
" 2>/dev/null || echo "error")
        
        case "$state" in
            "success")
                log "INFO" "‚úÖ $description –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                return 0
                ;;
            "failed"|"upstream_failed")
                log "ERROR" "‚ùå $description –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
                return 1
                ;;
            "running")
                dots=$(((dots + 1) % 4))
                local progress_dots=$(printf "%*s" $dots '' | tr ' ' '.')
                printf "\r${YELLOW}[–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø]${NC} $description$progress_dots   "
                sleep 5
                ;;
            *)
                sleep 3
                ;;
        esac
    done
}

show_qa_results() {
    local qa_report_path="$1"
    
    if [ ! -f "$qa_report_path" ]; then
        log "WARN" "‚ö†Ô∏è QA –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $qa_report_path"
        return
    fi
    
    log "INFO" "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏..."
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ QA –æ—Ç—á–µ—Ç–∞
    local qa_data=$(python3 -c "
import json
import sys

try:
    with open('$qa_report_path', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    quality_summary = data.get('quality_summary', {})
    level_details = data.get('level_details', [])
    
    print(f\"Overall Score: {quality_summary.get('overall_score', 'N/A')}\")
    print(f\"Quality Grade: {quality_summary.get('quality_grade', 'N/A')}\")
    print(f\"Target Achieved: {quality_summary.get('target_achieved', 'N/A')}\")
    print(f\"Total Corrections: {quality_summary.get('total_corrections', 'N/A')}\")
    
    for i, level in enumerate(level_details[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5 —É—Ä–æ–≤–Ω–µ–π
        confidence = level.get('confidence', 0)
        print(f\"Level {i} Score: {confidence}\")
        
except Exception as e:
    print(f\"Error reading QA report: {e}\")
" 2>/dev/null)
    
    echo ""
    echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ 5-–£–†–û–í–ù–ï–í–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò:"
    echo "============================================="
    echo "$qa_data" | while read -r line; do
        if [[ "$line" =~ "Overall Score:" ]]; then
            local score=$(echo "$line" | cut -d':' -f2 | xargs)
            echo -e "üéØ –û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: ${GREEN}$score%${NC}"
        elif [[ "$line" =~ "Quality Grade:" ]]; then
            local grade=$(echo "$line" | cut -d':' -f2 | xargs)
            echo -e "üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${BLUE}$grade${NC}"
        elif [[ "$line" =~ "Target Achieved:" ]]; then
            local achieved=$(echo "$line" | cut -d':' -f2 | xargs)
            if [[ "$achieved" == "True" ]]; then
                echo -e "‚úÖ –¶–µ–ª—å 100% –∫–∞—á–µ—Å—Ç–≤–∞: ${GREEN}–î–û–°–¢–ò–ì–ù–£–¢–ê${NC}"
            else
                echo -e "‚ö†Ô∏è –¶–µ–ª—å 100% –∫–∞—á–µ—Å—Ç–≤–∞: ${YELLOW}–ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê${NC}"
            fi
        elif [[ "$line" =~ "Level "[1-5]" Score:" ]]; then
            local level_num=$(echo "$line" | cut -d' ' -f2)
            local score=$(echo "$line" | cut -d':' -f2 | xargs)
            echo -e "   –£—Ä–æ–≤–µ–Ω—å $level_num: ${YELLOW}$score%${NC}"
        fi
    done
    echo ""
}

process_single_file() {
    local pdf_file="$1"
    local filename=$(basename "$pdf_file")
    local timestamp=$(date +%s)
    
    log "INFO" "üìÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É: $filename"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ 2 (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è + –≤–∞–ª–∏–¥–∞—Ü–∏—è)
    local base_config="
input_file=$pdf_file
filename=$filename
timestamp=$timestamp
target_language=zh
quality_level=high
enable_ocr=true
preserve_structure=true
extract_tables=true
extract_images=true
stage_mode=conversion_with_validation
processing_stages=3
validation_enabled=true
quality_target=100.0"
    
    # –≠—Ç–∞–ø 2.1: Document Preprocessing
    log "INFO" "üîÑ –≠—Ç–∞–ø 2.1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞..."
    local dag1_run_id
    dag1_run_id=$(trigger_dag "document_preprocessing" "$base_config" "Document Preprocessing")
    
    if [ $? -eq 0 ]; then
        if wait_for_dag_completion "document_preprocessing" "$dag1_run_id" "Document Preprocessing" 1800; then
            log "INFO" "‚úÖ –≠—Ç–∞–ø 2.1 –∑–∞–≤–µ—Ä—à–µ–Ω: –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω"
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            return 1
        fi
    else
        return 1
    fi
    
    # –≠—Ç–∞–ø 2.2: Content Transformation
    log "INFO" "üîÑ –≠—Ç–∞–ø 2.2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Markdown..."
    local transform_config="
intermediate_file=/app/temp/dag1_results_${timestamp}.json
original_config=$base_config
dag1_completed=true
vllm_model=Qwen/Qwen2.5-VL-32B-Instruct
transformation_quality=high
preserve_technical_terms=true"
    
    local dag2_run_id
    dag2_run_id=$(trigger_dag "content_transformation" "$transform_config" "Content Transformation")
    
    if [ $? -eq 0 ]; then
        if wait_for_dag_completion "content_transformation" "$dag2_run_id" "Content Transformation" 1200; then
            log "INFO" "‚úÖ –≠—Ç–∞–ø 2.2 –∑–∞–≤–µ—Ä—à–µ–Ω: Markdown —Å–æ–∑–¥–∞–Ω"
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ Markdown"
            return 1
        fi
    else
        return 1
    fi
    
    # –≠—Ç–∞–ø 2.3: Quality Assurance (5 —É—Ä–æ–≤–Ω–µ–π)
    log "INFO" "üîÑ –≠—Ç–∞–ø 2.3: 5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞..."
    local qa_config="
translated_file=/app/output_md_zh/${timestamp}_${filename%.pdf}.md
translated_content=from_file
original_config=$base_config
translation_metadata={\"target_language\":\"zh\",\"processing_chain\":[\"document_preprocessing\",\"content_transformation\"]}
dag3_completed=false
quality_target=100.0
validation_levels=5
auto_correction=true
validation_mode=content_only"
    
    local dag4_run_id
    dag4_run_id=$(trigger_dag "quality_assurance" "$qa_config" "Quality Assurance (5 levels)")
    
    if [ $? -eq 0 ]; then
        if wait_for_dag_completion "quality_assurance" "$dag4_run_id" "Quality Assurance" 900; then
            log "INFO" "‚úÖ –≠—Ç–∞–ø 2.3 –∑–∞–≤–µ—Ä—à–µ–Ω: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞"
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã QA
            local qa_report_path="/app/temp/qa_report_qa_${timestamp}.json"
            show_qa_results "$qa_report_path"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            local output_file="$OUTPUT_DIR/${timestamp}_${filename%.pdf}.md"
            if [ -f "$output_file" ]; then
                log "INFO" "üìÅ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $output_file"
                log "INFO" "üìã QA –æ—Ç—á–µ—Ç: $qa_report_path"
                return 0
            else
                log "WARN" "‚ö†Ô∏è –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $output_file"
                return 1
            fi
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞"
            return 1
        fi
    else
        return 1
    fi
}

process_batch() {
    log "INFO" "üîç –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
    local pdf_files=()
    while IFS= read -r -d '' file; do
        pdf_files+=("$file")
    done < <(find "$INPUT_DIR" -name "*.pdf" -type f -print0)
    
    local total_files=${#pdf_files[@]}
    
    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ $INPUT_DIR"
        echo "–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É $INPUT_DIR –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞"
        return 0
    fi
    
    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: $total_files"
    echo ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    local processed=0
    local failed=0
    local high_quality=0
    local start_time=$(date +%s)
    
    for pdf_file in "${pdf_files[@]}"; do
        local filename=$(basename "$pdf_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename"
        
        if process_single_file "$pdf_file"; then
            ((processed++))
            ((high_quality++))  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û + –í–ê–õ–ò–î–ò–†–û–í–ê–ù–û${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê${NC}"
        fi
        
        echo ""
    done
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time=$(date +%s)
    local total_duration=$((end_time - start_time))
    
    echo "==============================================================================="
    echo -e "${GREEN}–≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø + –í–ê–õ–ò–î–ê–¶–ò–Ø${NC}"
    echo "==============================================================================="
    echo -e "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
    echo -e "   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${GREEN}$processed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e "   –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (>95%): ${GREEN}$high_quality${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e "   –û—à–∏–±–æ–∫: ${RED}$failed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e "   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${BLUE}$total_duration${NC} —Å–µ–∫—É–Ω–¥"
    echo ""
    echo -e "üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ 5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:"
    echo -e "   1Ô∏è‚É£ OCR –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è"
    echo -e "   2Ô∏è‚É£ –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (SSIM)"
    echo -e "   3Ô∏è‚É£ AST —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"
    echo -e "   4Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
    echo -e "   5Ô∏è‚É£ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
    echo ""
    echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$OUTPUT_DIR${NC}"
    echo -e "üìã QA –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}/app/temp/${NC}"
    echo -e "üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$LOGS_DIR${NC}"
    echo ""
    
    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"
        echo "   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PDF —Ñ–∞–π–ª—ã —á–∏—Ç–∞–µ–º—ã"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Quality Assurance —Å–µ—Ä–≤–∏—Å–∞"
    else
        echo -e "${GREEN}üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã!${NC}"
        echo ""
        echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        echo "   - –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é (–∫–∞—á–µ—Å—Ç–≤–æ 100%)"
        echo "   - –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ./process-stage3.sh [—è–∑—ã–∫]"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    show_header
    check_services
    
    echo -e "${YELLOW}–í–Ω–∏–º–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏${NC}"
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...${NC}"
    read -r
    
    process_batch
}

# –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi